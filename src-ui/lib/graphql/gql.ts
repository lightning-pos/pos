/* eslint-disable */
import * as types from './graphql';



/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "query GetAnalyticsOverview($days: Int!) {\n  analyticsOverview(days: $days) {\n    totalSales\n    totalOrders\n    totalCustomers\n    totalProducts\n  }\n}": typeof types.GetAnalyticsOverviewDocument,
    "query getCategories($first: Int!, $offset: Int!) {\n  itemCategories(first: $first, offset: $offset) {\n    id\n    name\n    description\n    state\n    createdAt\n    updatedAt\n  }\n}\n\nquery getCategory($id: DbUuid!) {\n  itemsCategory(id: $id) {\n    id\n    name\n    description\n    state\n    createdAt\n    updatedAt\n  }\n}\n\nmutation createCategory($input: ItemGroupNew!) {\n  createItemCategory(newCategory: $input) {\n    id\n    name\n    description\n    state\n    createdAt\n    updatedAt\n  }\n}\n\nmutation updateCategory($input: ItemGroupUpdate!) {\n  updateItemCategory(category: $input) {\n    id\n    name\n    description\n    state\n    createdAt\n    updatedAt\n  }\n}\n\nmutation deleteCategory($id: DbUuid!) {\n  deleteItemCategory(id: $id)\n}": typeof types.GetCategoriesDocument,
    "query getItems($first: Int!, $offset: Int!) {\n  items(first: $first, offset: $offset) {\n    id\n    name\n    description\n    nature\n    state\n    price\n    createdAt\n    updatedAt\n    category {\n      id\n      name\n      description\n      state\n      createdAt\n      updatedAt\n    }\n    taxes {\n      id\n      name\n      rate\n      description\n      createdAt\n      updatedAt\n    }\n  }\n}\n\nquery getItemCategories {\n  itemCategories {\n    id\n    name\n    description\n    state\n    createdAt\n    updatedAt\n  }\n}\n\nquery getItemTaxes {\n  taxes {\n    id\n    name\n    rate\n    description\n    createdAt\n    updatedAt\n  }\n}\n\nmutation createItem($input: NewItem!) {\n  createItem(item: $input) {\n    id\n    name\n    description\n    nature\n    state\n    price\n    createdAt\n    updatedAt\n    category {\n      id\n      name\n      description\n      state\n      createdAt\n      updatedAt\n    }\n    taxes {\n      id\n      name\n      rate\n      description\n      createdAt\n      updatedAt\n    }\n  }\n}\n\nmutation updateItem($input: UpdateItem!) {\n  updateItem(item: $input) {\n    id\n    name\n    description\n    nature\n    state\n    price\n    createdAt\n    updatedAt\n    category {\n      id\n      name\n      description\n      state\n      createdAt\n      updatedAt\n    }\n    taxes {\n      id\n      name\n      rate\n      description\n      createdAt\n      updatedAt\n    }\n  }\n}\n\nmutation deleteItem($id: DbUuid!) {\n  deleteItem(id: $id)\n}": typeof types.GetItemsDocument,
    "query getPosCategories($first: Int!) {\n  itemCategories(first: $first) {\n    id\n    name\n    description\n    state\n    createdAt\n    updatedAt\n  }\n}\n\nquery getPosItems($first: Int!, $offset: Int!) {\n  items(first: $first, offset: $offset) {\n    id\n    name\n    description\n    nature\n    state\n    price\n    createdAt\n    updatedAt\n    category {\n      id\n      name\n      description\n      state\n      createdAt\n      updatedAt\n    }\n    taxes {\n      id\n      name\n      rate\n      description\n      createdAt\n      updatedAt\n    }\n  }\n}\n\nquery getPosTaxes {\n  taxes {\n    id\n    name\n    rate\n    description\n    createdAt\n    updatedAt\n  }\n}\n\nquery getPosCustomerByPhone($phone: String!) {\n  customerByPhone(phone: $phone) {\n    id\n    fullName\n    phone\n    email\n    address\n    createdAt\n    updatedAt\n  }\n}\n\nmutation createPosCustomer($fullName: String!, $phone: String!) {\n  createCustomer(customer: {fullName: $fullName, phone: $phone}) {\n    id\n    fullName\n    phone\n    email\n    address\n    createdAt\n    updatedAt\n  }\n}": typeof types.GetPosCategoriesDocument,
};
const documents: Documents = {
    "query GetAnalyticsOverview($days: Int!) {\n  analyticsOverview(days: $days) {\n    totalSales\n    totalOrders\n    totalCustomers\n    totalProducts\n  }\n}": types.GetAnalyticsOverviewDocument,
    "query getCategories($first: Int!, $offset: Int!) {\n  itemCategories(first: $first, offset: $offset) {\n    id\n    name\n    description\n    state\n    createdAt\n    updatedAt\n  }\n}\n\nquery getCategory($id: DbUuid!) {\n  itemsCategory(id: $id) {\n    id\n    name\n    description\n    state\n    createdAt\n    updatedAt\n  }\n}\n\nmutation createCategory($input: ItemGroupNew!) {\n  createItemCategory(newCategory: $input) {\n    id\n    name\n    description\n    state\n    createdAt\n    updatedAt\n  }\n}\n\nmutation updateCategory($input: ItemGroupUpdate!) {\n  updateItemCategory(category: $input) {\n    id\n    name\n    description\n    state\n    createdAt\n    updatedAt\n  }\n}\n\nmutation deleteCategory($id: DbUuid!) {\n  deleteItemCategory(id: $id)\n}": types.GetCategoriesDocument,
    "query getItems($first: Int!, $offset: Int!) {\n  items(first: $first, offset: $offset) {\n    id\n    name\n    description\n    nature\n    state\n    price\n    createdAt\n    updatedAt\n    category {\n      id\n      name\n      description\n      state\n      createdAt\n      updatedAt\n    }\n    taxes {\n      id\n      name\n      rate\n      description\n      createdAt\n      updatedAt\n    }\n  }\n}\n\nquery getItemCategories {\n  itemCategories {\n    id\n    name\n    description\n    state\n    createdAt\n    updatedAt\n  }\n}\n\nquery getItemTaxes {\n  taxes {\n    id\n    name\n    rate\n    description\n    createdAt\n    updatedAt\n  }\n}\n\nmutation createItem($input: NewItem!) {\n  createItem(item: $input) {\n    id\n    name\n    description\n    nature\n    state\n    price\n    createdAt\n    updatedAt\n    category {\n      id\n      name\n      description\n      state\n      createdAt\n      updatedAt\n    }\n    taxes {\n      id\n      name\n      rate\n      description\n      createdAt\n      updatedAt\n    }\n  }\n}\n\nmutation updateItem($input: UpdateItem!) {\n  updateItem(item: $input) {\n    id\n    name\n    description\n    nature\n    state\n    price\n    createdAt\n    updatedAt\n    category {\n      id\n      name\n      description\n      state\n      createdAt\n      updatedAt\n    }\n    taxes {\n      id\n      name\n      rate\n      description\n      createdAt\n      updatedAt\n    }\n  }\n}\n\nmutation deleteItem($id: DbUuid!) {\n  deleteItem(id: $id)\n}": types.GetItemsDocument,
    "query getPosCategories($first: Int!) {\n  itemCategories(first: $first) {\n    id\n    name\n    description\n    state\n    createdAt\n    updatedAt\n  }\n}\n\nquery getPosItems($first: Int!, $offset: Int!) {\n  items(first: $first, offset: $offset) {\n    id\n    name\n    description\n    nature\n    state\n    price\n    createdAt\n    updatedAt\n    category {\n      id\n      name\n      description\n      state\n      createdAt\n      updatedAt\n    }\n    taxes {\n      id\n      name\n      rate\n      description\n      createdAt\n      updatedAt\n    }\n  }\n}\n\nquery getPosTaxes {\n  taxes {\n    id\n    name\n    rate\n    description\n    createdAt\n    updatedAt\n  }\n}\n\nquery getPosCustomerByPhone($phone: String!) {\n  customerByPhone(phone: $phone) {\n    id\n    fullName\n    phone\n    email\n    address\n    createdAt\n    updatedAt\n  }\n}\n\nmutation createPosCustomer($fullName: String!, $phone: String!) {\n  createCustomer(customer: {fullName: $fullName, phone: $phone}) {\n    id\n    fullName\n    phone\n    email\n    address\n    createdAt\n    updatedAt\n  }\n}": types.GetPosCategoriesDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetAnalyticsOverview($days: Int!) {\n  analyticsOverview(days: $days) {\n    totalSales\n    totalOrders\n    totalCustomers\n    totalProducts\n  }\n}"): typeof import('./graphql').GetAnalyticsOverviewDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query getCategories($first: Int!, $offset: Int!) {\n  itemCategories(first: $first, offset: $offset) {\n    id\n    name\n    description\n    state\n    createdAt\n    updatedAt\n  }\n}\n\nquery getCategory($id: DbUuid!) {\n  itemsCategory(id: $id) {\n    id\n    name\n    description\n    state\n    createdAt\n    updatedAt\n  }\n}\n\nmutation createCategory($input: ItemGroupNew!) {\n  createItemCategory(newCategory: $input) {\n    id\n    name\n    description\n    state\n    createdAt\n    updatedAt\n  }\n}\n\nmutation updateCategory($input: ItemGroupUpdate!) {\n  updateItemCategory(category: $input) {\n    id\n    name\n    description\n    state\n    createdAt\n    updatedAt\n  }\n}\n\nmutation deleteCategory($id: DbUuid!) {\n  deleteItemCategory(id: $id)\n}"): typeof import('./graphql').GetCategoriesDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query getItems($first: Int!, $offset: Int!) {\n  items(first: $first, offset: $offset) {\n    id\n    name\n    description\n    nature\n    state\n    price\n    createdAt\n    updatedAt\n    category {\n      id\n      name\n      description\n      state\n      createdAt\n      updatedAt\n    }\n    taxes {\n      id\n      name\n      rate\n      description\n      createdAt\n      updatedAt\n    }\n  }\n}\n\nquery getItemCategories {\n  itemCategories {\n    id\n    name\n    description\n    state\n    createdAt\n    updatedAt\n  }\n}\n\nquery getItemTaxes {\n  taxes {\n    id\n    name\n    rate\n    description\n    createdAt\n    updatedAt\n  }\n}\n\nmutation createItem($input: NewItem!) {\n  createItem(item: $input) {\n    id\n    name\n    description\n    nature\n    state\n    price\n    createdAt\n    updatedAt\n    category {\n      id\n      name\n      description\n      state\n      createdAt\n      updatedAt\n    }\n    taxes {\n      id\n      name\n      rate\n      description\n      createdAt\n      updatedAt\n    }\n  }\n}\n\nmutation updateItem($input: UpdateItem!) {\n  updateItem(item: $input) {\n    id\n    name\n    description\n    nature\n    state\n    price\n    createdAt\n    updatedAt\n    category {\n      id\n      name\n      description\n      state\n      createdAt\n      updatedAt\n    }\n    taxes {\n      id\n      name\n      rate\n      description\n      createdAt\n      updatedAt\n    }\n  }\n}\n\nmutation deleteItem($id: DbUuid!) {\n  deleteItem(id: $id)\n}"): typeof import('./graphql').GetItemsDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query getPosCategories($first: Int!) {\n  itemCategories(first: $first) {\n    id\n    name\n    description\n    state\n    createdAt\n    updatedAt\n  }\n}\n\nquery getPosItems($first: Int!, $offset: Int!) {\n  items(first: $first, offset: $offset) {\n    id\n    name\n    description\n    nature\n    state\n    price\n    createdAt\n    updatedAt\n    category {\n      id\n      name\n      description\n      state\n      createdAt\n      updatedAt\n    }\n    taxes {\n      id\n      name\n      rate\n      description\n      createdAt\n      updatedAt\n    }\n  }\n}\n\nquery getPosTaxes {\n  taxes {\n    id\n    name\n    rate\n    description\n    createdAt\n    updatedAt\n  }\n}\n\nquery getPosCustomerByPhone($phone: String!) {\n  customerByPhone(phone: $phone) {\n    id\n    fullName\n    phone\n    email\n    address\n    createdAt\n    updatedAt\n  }\n}\n\nmutation createPosCustomer($fullName: String!, $phone: String!) {\n  createCustomer(customer: {fullName: $fullName, phone: $phone}) {\n    id\n    fullName\n    phone\n    email\n    address\n    createdAt\n    updatedAt\n  }\n}"): typeof import('./graphql').GetPosCategoriesDocument;


export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}
