schema {
  query: Query
  mutation: Mutation
}

enum ItemCategoryState {
  ACTIVE
  INACTIVE
  DELETED
}

enum ItemNature {
  GOODS
  SERVICE
}

enum ItemState {
  ACTIVE
  INACTIVE
  DELETED
}

enum UserState {
  ACTIVE
  INACTIVE
  LOCKED
}

input NewItem {
  name: String!
  description: String
  nature: ItemNature!
  state: ItemState!
  price: Money!
  categoryId: DbUuid!
}

input NewItemCategory {
  name: String!
  description: String
}

input UpdateItem {
  id: DbUuid!
  name: String
  description: String
  nature: ItemNature
  state: ItemState
  price: Money
  categoryId: DbUuid
  updatedAt: LocalDateTime
}

input UpdateItemCategory {
  id: DbUuid!
  name: String
  description: String
  state: ItemCategoryState
  updatedAt: LocalDateTime
}

input UserNewInput {
  username: String!
  pin: String!
  fullName: String!
}

input UserUpdateInput {
  id: DbUuid!
  username: String
  pin: String
  fullName: String
  state: UserState
}

scalar DbUuid

"""
  Combined date and time (without time zone) in `yyyy-MM-dd HH:mm:ss` format.

  See also [`chrono::NaiveDateTime`][1] for details.

  [1]: https://docs.rs/chrono/latest/chrono/naive/struct.NaiveDateTime.html
"""
scalar LocalDateTime

scalar Money

type Item {
  id: DbUuid!
  name: String!
  description: String
  nature: ItemNature!
  state: ItemState!
  price: Money!
  createdAt: LocalDateTime!
  updatedAt: LocalDateTime!
  category: ItemCategory!
}

type ItemCategory {
  id: DbUuid!
  name: String!
  description: String
  state: ItemCategoryState!
  createdAt: LocalDateTime!
  updatedAt: LocalDateTime!
}

type Mutation {
  login(username: String!, password: String!): Boolean!
  logout: Boolean!
  addUser(user: UserNewInput!): User!
  updateUser(user: UserUpdateInput!): User!
  deleteUser(id: DbUuid!): Int!
  createItem(item: NewItem!): Item!
  updateItem(item: UpdateItem!): Item!
  deleteItem(id: DbUuid!): Int!
  createItemCategory(newCategory: NewItemCategory!): ItemCategory!
  updateItemCategory(category: UpdateItemCategory!): ItemCategory!
  deleteItemCategory(id: DbUuid!): Int!
}

type Query {
  apiVersion: String!
  itemCategories(first: Int, offset: Int): [ItemCategory!]!
  itemsCategory(id: DbUuid!): ItemCategory!
  items(first: Int, offset: Int): [Item!]!
  item(id: DbUuid!): Item!
  users(first: Int, offset: Int): [User!]!
  user(id: DbUuid!): User!
}

type User {
  id: DbUuid!
  username: String!
  fullName: String!
  state: UserState!
  lastLoginAt: LocalDateTime
  createdAt: LocalDateTime!
  updatedAt: LocalDateTime!
}
