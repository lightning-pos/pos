schema {
  query: Query
  mutation: Mutation
}

enum CostCenterState {
  ACTIVE
  INACTIVE
}

enum DiscountScope {
  ALL_ITEMS
}

enum DiscountState {
  ACTIVE
  INACTIVE
  SCHEDULED
  EXPIRED
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}

enum ItemGroupState {
  ACTIVE
  INACTIVE
  DELETED
}

enum ItemNature {
  GOODS
  SERVICE
}

enum ItemState {
  ACTIVE
  INACTIVE
  DELETED
}

enum PaymentMethodState {
  ACTIVE
  INACTIVE
}

enum PurchaseCategoryState {
  ACTIVE
  INACTIVE
  DELETED
}

enum SalesOrderPaymentState {
  PENDING
  PARTIALLY_PAID
  PAID
  REFUNDED
  PARTIALLY_REFUNDED
  FAILED
  VOIDED
}

enum SalesOrderState {
  DRAFT
  COMPLETED
  CANCELLED
}

enum UserState {
  ACTIVE
  INACTIVE
  LOCKED
}

input BrandNewInput {
  name: String!
  description: String
  isActive: Boolean
}

input BrandUpdateInput {
  id: DbUuid!
  name: String
  description: String
  isActive: Boolean
}

input CartNewInput {
  customerId: DbUuid
  cartData: String!
}

input CartUpdateInput {
  id: DbUuid!
  cartData: String
}

input ChannelNewInput {
  name: String!
  description: String
  isActive: Boolean
}

input ChannelUpdateInput {
  id: DbUuid!
  name: String
  description: String
  isActive: Boolean
}

input CustomerNewInput {
  fullName: String!
  email: String
  phone: String
  address: String
}

input CustomerUpdateInput {
  id: DbUuid!
  fullName: String
  email: String
  phone: String
  address: String
}

input DiscountNewInput {
  name: String!
  description: String
  discountType: DiscountType!
  value: Money!
  scope: DiscountScope!
  state: DiscountState
  startDate: LocalDateTime
  endDate: LocalDateTime
}

input DiscountUpdateInput {
  id: DbUuid!
  name: String
  description: String
  discountType: DiscountType
  value: Money
  scope: DiscountScope
  state: DiscountState
  startDate: LocalDateTime
  endDate: LocalDateTime
}

input ExpenseNewInput {
  title: String!
  amount: Money!
  expenseDate: LocalDateTime!
  categoryId: DbUuid!
  costCenterId: DbUuid!
  description: String
}

input ExpenseUpdateInput {
  id: DbUuid!
  title: String
  amount: Money
  expenseDate: LocalDateTime
  categoryId: DbUuid
  costCenterId: DbUuid
  description: String
}

input ItemGroupNew {
  name: String!
  description: String
}

input ItemGroupUpdate {
  id: DbUuid!
  name: String
  description: String
  state: ItemGroupState
  updatedAt: LocalDateTime
}

input ItemTaxNewInput {
  itemId: DbUuid!
  taxId: DbUuid!
}

input ItemVariantNewInput {
  itemId: DbUuid!
  sku: String
  priceAdjustment: Money
  isDefault: Boolean
  variantValueIds: [DbUuid!]!
}

input ItemVariantUpdateInput {
  id: DbUuid!
  sku: String
  priceAdjustment: Money
  isDefault: Boolean
  updatedAt: LocalDateTime
}

input NewItem {
  name: String!
  description: String
  nature: ItemNature!
  state: ItemState!
  price: Money!
  categoryId: DbUuid!
  taxIds: [DbUuid!]
}

input SalesChargeTypeNewInput {
  name: String!
  description: String
}

input SalesChargeTypeUpdateInput {
  id: DbUuid!
  name: String
  description: String
}

input SalesOrderChargeNewInput {
  chargeTypeId: DbUuid!
  chargeTypeName: String!
  amount: Money!
  taxAmount: Money!
  taxGroupId: DbUuid
}

input SalesOrderItemInput {
  itemId: DbUuid
  itemName: String!
  quantity: Int!
  sku: String
  priceAmount: Money!
  discAmount: Money!
  taxableAmount: Money!
  taxAmount: Money!
  totalAmount: Money!
}

input SalesOrderNewInput {
  orderDate: LocalDateTime!
  customerId: DbUuid
  customerName: String
  customerPhoneNumber: String
  billingAddress: String
  shippingAddress: String
  netAmount: Money!
  discAmount: Money!
  taxableAmount: Money!
  taxAmount: Money!
  totalAmount: Money!
  notes: String
  channelId: DbUuid!
  locationId: DbUuid!
  costCenterId: DbUuid!
  discountId: DbUuid
  items: [SalesOrderItemInput!]!
  charges: [SalesOrderChargeNewInput!]
}

input SalesOrderPaymentNewInput {
  orderId: DbUuid!
  paymentMethodId: DbUuid!
  paymentDate: LocalDateTime!
  amount: Money!
  referenceNumber: String
  notes: String
  state: SalesOrderPaymentState
}

input SalesOrderPaymentUpdateInput {
  id: DbUuid!
  paymentMethodId: DbUuid
  paymentDate: LocalDateTime
  amount: Money
  referenceNumber: String
  notes: String
  state: SalesOrderPaymentState
}

input SupplierNewInput {
  name: String!
  address: String
  phone: String
}

input SupplierUpdateInput {
  id: DbUuid!
  name: String
  address: String
  phone: String
}

input TaxGroupNewInput {
  name: String!
  description: String
  taxIds: [DbUuid!]
}

input TaxGroupUpdateInput {
  id: DbUuid!
  name: String
  description: String
}

input TaxNewInput {
  name: String!
  rate: Percentage!
  description: String
  itemIds: [DbUuid!]
}

input TaxUpdateInput {
  id: DbUuid!
  name: String
  rate: Percentage
  description: String
}

input UpdateItem {
  id: DbUuid!
  name: String
  description: String
  nature: ItemNature
  state: ItemState
  price: Money
  categoryId: DbUuid
  updatedAt: LocalDateTime
}

input UserNewInput {
  username: String!
  pin: String!
  fullName: String!
}

input UserUpdateInput {
  id: DbUuid!
  username: String
  pin: String
  fullName: String
  state: UserState
}

input VariantTypeNewInput {
  name: String!
  description: String
}

input VariantTypeUpdateInput {
  id: DbUuid!
  name: String
  description: String
  updatedAt: LocalDateTime
}

input VariantValueNewInput {
  variantTypeId: DbUuid!
  value: String!
  displayOrder: Int
}

input VariantValueUpdateInput {
  id: DbUuid!
  value: String
  displayOrder: Int
  updatedAt: LocalDateTime
}

scalar DbUuid

"""
  Combined date and time (without time zone) in `yyyy-MM-dd HH:mm:ss` format.

  See also [`chrono::NaiveDateTime`][1] for details.

  [1]: https://docs.rs/chrono/latest/chrono/naive/struct.NaiveDateTime.html
"""
scalar LocalDateTime

scalar Money

scalar Percentage

type AnalyticsOverview {
  totalSales: Money!
  totalOrders: Int!
  totalCustomers: Int!
  totalProducts: Int!
}

type Brand {
  id: DbUuid!
  name: String!
  description: String
  isActive: Boolean!
  createdAt: LocalDateTime!
  updatedAt: LocalDateTime!
}

type Cart {
  id: DbUuid!
  cartData: String!
  customerId: DbUuid
  createdAt: LocalDateTime!
  updatedAt: LocalDateTime!
  customer: Customer
}

type Channel {
  id: DbUuid!
  name: String!
  description: String
  isActive: Boolean!
  createdAt: LocalDateTime!
  updatedAt: LocalDateTime!
}

"Cost Center"
type CostCenter {
  id: DbUuid!
  name: String!
  code: String!
  description: String
  state: CostCenterState!
  createdAt: LocalDateTime!
  updatedAt: LocalDateTime!
}

type Customer {
  id: DbUuid!
  fullName: String!
  email: String
  phone: String
  address: String
  createdAt: LocalDateTime!
  updatedAt: LocalDateTime!
}

type Discount {
  id: DbUuid!
  name: String!
  description: String
  discountType: DiscountType!
  value: Money!
  scope: DiscountScope!
  state: DiscountState!
  startDate: LocalDateTime
  endDate: LocalDateTime
  createdAt: LocalDateTime!
  updatedAt: LocalDateTime!
}

type Expense {
  id: DbUuid!
  title: String!
  amount: Money!
  expenseDate: LocalDateTime!
  categoryId: DbUuid!
  costCenterId: DbUuid!
  description: String
  createdAt: LocalDateTime!
  updatedAt: LocalDateTime!
  category: PurchaseCategory!
  costCenter: CostCenter!
}

type Item {
  id: DbUuid!
  name: String!
  description: String
  nature: ItemNature!
  state: ItemState!
  price: Money!
  createdAt: LocalDateTime!
  updatedAt: LocalDateTime!
  category: ItemGroup!
  taxes: [Tax!]!
  variants: [ItemVariant!]!
  hasVariants: Boolean!
  defaultVariant: ItemVariant
}

type ItemGroup {
  id: DbUuid!
  name: String!
  description: String
  state: ItemGroupState!
  createdAt: LocalDateTime!
  updatedAt: LocalDateTime!
}

type ItemVariant {
  id: DbUuid!
  sku: String
  priceAdjustment: Money
  isDefault: Boolean!
  createdAt: LocalDateTime!
  updatedAt: LocalDateTime!
  item: Item!
  variantValues: [VariantValue!]!
  finalPrice: Money!
}

type Mutation {
  login(username: String!, password: String!): Boolean!
  logout: Boolean!
  addUser(user: UserNewInput!): User!
  updateUser(user: UserUpdateInput!): User!
  deleteUser(id: DbUuid!): Int!
  createItem(item: NewItem!): Item!
  updateItem(item: UpdateItem!): Item!
  deleteItem(id: DbUuid!): Int!
  createItemCategory(newCategory: ItemGroupNew!): ItemGroup!
  updateItemCategory(category: ItemGroupUpdate!): ItemGroup!
  deleteItemCategory(id: DbUuid!): Int!
  createPurchaseCategory(name: String!, description: String, state: PurchaseCategoryState): PurchaseCategory!
  updatePurchaseCategory(id: DbUuid!, name: String, description: String, state: PurchaseCategoryState): PurchaseCategory!
  deletePurchaseCategory(id: DbUuid!): DbUuid!
  createSalesOrder(salesOrder: SalesOrderNewInput!): SalesOrder!
  voidSalesOrder(id: DbUuid!): SalesOrder!
  createCart(cart: CartNewInput!): Cart!
  updateCart(cart: CartUpdateInput!): Cart!
  deleteCart(id: DbUuid!): Int!
  createCustomer(customer: CustomerNewInput!): Customer!
  updateCustomer(customer: CustomerUpdateInput!): Customer!
  deleteCustomer(id: DbUuid!): Int!
  createTax(input: TaxNewInput!): Tax!
  updateTax(input: TaxUpdateInput!): Tax!
  deleteTax(id: DbUuid!): Int!
  assignTaxToItem(input: ItemTaxNewInput!): Int!
  removeTaxFromItem(itemId: DbUuid!, taxId: DbUuid!): Int!
  createTaxGroup(input: TaxGroupNewInput!): TaxGroup!
  updateTaxGroup(input: TaxGroupUpdateInput!): TaxGroup!
  deleteTaxGroup(id: DbUuid!): Int!
  assignTaxToGroup(taxGroupId: DbUuid!, taxId: DbUuid!): Int!
  removeTaxFromGroup(taxGroupId: DbUuid!, taxId: DbUuid!): Int!
  createSupplier(supplier: SupplierNewInput!): Supplier!
  updateSupplier(supplier: SupplierUpdateInput!): Supplier!
  deleteSupplier(id: DbUuid!): Int!
  createExpense(expense: ExpenseNewInput!): Expense!
  updateExpense(expense: ExpenseUpdateInput!): Expense!
  deleteExpense(id: DbUuid!): Int!
  createChannel(input: ChannelNewInput!): Channel!
  updateChannel(input: ChannelUpdateInput!): Channel!
  deleteChannel(id: DbUuid!): Int!
  createBrand(input: BrandNewInput!): Brand!
  updateBrand(input: BrandUpdateInput!): Brand!
  deleteBrand(id: DbUuid!): Int!
  createCostCenter(name: String!, code: String!, description: String, state: CostCenterState): CostCenter!
  updateCostCenter(id: DbUuid!, name: String, code: String, description: String, state: CostCenterState): CostCenter!
  deleteCostCenter(id: DbUuid!): DbUuid!
  createPaymentMethod(name: String!, code: String!, description: String, state: PaymentMethodState): PaymentMethod!
  updatePaymentMethod(id: DbUuid!, name: String, code: String, description: String, state: PaymentMethodState): PaymentMethod!
  deletePaymentMethod(id: DbUuid!): DbUuid!
  createSalesOrderPayment(payment: SalesOrderPaymentNewInput!): SalesOrderPayment!
  updateSalesOrderPayment(payment: SalesOrderPaymentUpdateInput!): SalesOrderPayment!
  voidSalesOrderPayment(id: DbUuid!): SalesOrderPayment!
  createDiscount(discount: DiscountNewInput!): Discount!
  updateDiscount(discount: DiscountUpdateInput!): Discount!
  deleteDiscount(id: DbUuid!): Int!
  createSalesChargeType(chargeType: SalesChargeTypeNewInput!): SalesChargeType!
  updateSalesChargeType(chargeType: SalesChargeTypeUpdateInput!): SalesChargeType!
  deleteSalesChargeType(id: DbUuid!): Boolean!
  createVariantType(input: VariantTypeNewInput!): VariantType!
  updateVariantType(input: VariantTypeUpdateInput!): VariantType!
  deleteVariantType(id: DbUuid!): Int!
  createVariantValue(input: VariantValueNewInput!): VariantValue!
  updateVariantValue(input: VariantValueUpdateInput!): VariantValue!
  deleteVariantValue(id: DbUuid!): Int!
  createItemVariant(input: ItemVariantNewInput!): ItemVariant!
  updateItemVariant(input: ItemVariantUpdateInput!): ItemVariant!
  deleteItemVariant(id: DbUuid!): Int!
  assignVariantValueToItemVariant(itemVariantId: DbUuid!, variantValueId: DbUuid!): Int!
  removeVariantValueFromItemVariant(itemVariantId: DbUuid!, variantValueId: DbUuid!): Int!
}

"Payment Method"
type PaymentMethod {
  id: DbUuid!
  name: String!
  code: String!
  description: String
  state: PaymentMethodState!
  createdAt: LocalDateTime!
  updatedAt: LocalDateTime!
}

"Purchase Category"
type PurchaseCategory {
  id: DbUuid!
  name: String!
  description: String
  state: PurchaseCategoryState!
  createdAt: LocalDateTime!
  updatedAt: LocalDateTime!
}

type Query {
  apiVersion: String!
  itemCategories(first: Int, offset: Int): [ItemGroup!]!
  itemsCategory(id: DbUuid!): ItemGroup!
  items(first: Int, offset: Int): [Item!]!
  item(id: DbUuid!): Item!
  purchaseCategories(first: Int, offset: Int): [PurchaseCategory!]!
  purchaseCategory(id: DbUuid!): PurchaseCategory!
  allPurchaseCategories: [PurchaseCategory!]!
  users(first: Int, offset: Int): [User!]!
  user(id: DbUuid!): User!
  customers(first: Int, offset: Int): [Customer!]!
  totalCustomers: Int!
  customer(id: DbUuid!): Customer!
  customerByPhone(phone: String!): Customer!
  salesOrders(first: Int, offset: Int): [SalesOrder!]!
  totalSalesOrders: Int!
  salesOrder(id: DbUuid!): SalesOrder!
  carts(first: Int, offset: Int): [Cart!]!
  totalCarts: Int!
  cart(id: DbUuid!): Cart!
  taxes(first: Int, offset: Int): [Tax!]!
  totalTaxes: Int!
  tax(id: DbUuid!): Tax!
  taxGroups(first: Int, offset: Int): [TaxGroup!]!
  totalTaxGroups: Int!
  taxGroup(id: DbUuid!): TaxGroup!
  channels: [Channel!]!
  activeChannels: [Channel!]!
  channel(id: DbUuid!): Channel!
  brands: [Brand!]!
  activeBrands: [Brand!]!
  brand(id: DbUuid!): Brand!
  analyticsOverview(days: Int): AnalyticsOverview!
  suppliers(first: Int, offset: Int): [Supplier!]!
  totalSuppliers: Int!
  supplier(id: DbUuid!): Supplier!
  expenses(first: Int, offset: Int, costCenterId: DbUuid, startDate: String, endDate: String): [Expense!]!
  totalExpenses(costCenterId: DbUuid, startDate: String, endDate: String): Int!
  expense(id: DbUuid!): Expense!
  expensesByCategory(categoryId: DbUuid!, first: Int, offset: Int): [Expense!]!
  costCenters(first: Int, offset: Int): [CostCenter!]!
  costCenter(id: DbUuid!): CostCenter!
  allCostCenters: [CostCenter!]!
  totalCostCenters: Int!
  paymentMethods(first: Int, offset: Int): [PaymentMethod!]!
  paymentMethod(id: DbUuid!): PaymentMethod!
  allPaymentMethods: [PaymentMethod!]!
  totalPaymentMethods: Int!
  salesOrderPayments(orderId: DbUuid!): [SalesOrderPayment!]!
  discounts(first: Int, offset: Int, state: DiscountState): [Discount!]!
  discount(id: DbUuid!): Discount!
  salesChargeTypes(first: Int, offset: Int): [SalesChargeType!]!
  salesChargeType(id: DbUuid!): SalesChargeType!
  salesChargeTypesCount: Int!
  variantTypes(first: Int, offset: Int): [VariantType!]!
  variantType(id: DbUuid!): VariantType!
  totalVariantTypes: Int!
  variantValues(variantTypeId: DbUuid, first: Int, offset: Int): [VariantValue!]!
  variantValue(id: DbUuid!): VariantValue!
  itemVariants(itemId: DbUuid, first: Int, offset: Int): [ItemVariant!]!
  itemVariant(id: DbUuid!): ItemVariant!
}

type SalesChargeType {
  id: DbUuid!
  name: String!
  description: String
  createdAt: LocalDateTime!
  updatedAt: LocalDateTime!
}

type SalesOrder {
  id: DbUuid!
  orderReadableId: String!
  customerId: DbUuid
  customerName: String
  customerPhoneNumber: String
  billingAddress: String
  shippingAddress: String
  orderDate: LocalDateTime!
  netAmount: Money!
  discAmount: Money!
  taxableAmount: Money!
  taxAmount: Money!
  totalAmount: Money!
  orderState: SalesOrderState!
  paymentState: SalesOrderPaymentState!
  notes: String
  channelId: DbUuid!
  locationId: DbUuid!
  costCenterId: DbUuid!
  createdBy: DbUuid!
  updatedBy: DbUuid!
  discountId: DbUuid
  createdAt: LocalDateTime!
  updatedAt: LocalDateTime!
  customer: Customer
  costCenter: CostCenter!
  items: [SalesOrderItem!]!
  charges: [SalesOrderCharge!]!
  payments: [SalesOrderPayment!]!
  totalPaidAmount: Money!
}

type SalesOrderCharge {
  id: DbUuid!
  orderId: DbUuid!
  chargeTypeId: DbUuid!
  chargeTypeName: String!
  amount: Money!
  taxAmount: Money!
  taxGroupId: DbUuid
  createdAt: LocalDateTime!
  updatedAt: LocalDateTime!
}

type SalesOrderItem {
  id: DbUuid!
  orderId: DbUuid!
  itemId: DbUuid
  itemName: String!
  quantity: Int!
  priceAmount: Money!
  taxAmount: Money!
  totalAmount: Money!
  createdAt: LocalDateTime!
  updatedAt: LocalDateTime!
}

"Sales Order Payment"
type SalesOrderPayment {
  id: DbUuid!
  orderId: DbUuid!
  paymentMethodId: DbUuid!
  paymentDate: LocalDateTime!
  amount: Money!
  referenceNumber: String
  notes: String
  state: SalesOrderPaymentState!
}

type Supplier {
  id: DbUuid!
  name: String!
  address: String
  phone: String
  createdAt: LocalDateTime!
  updatedAt: LocalDateTime!
}

type Tax {
  id: DbUuid!
  name: String!
  rate: Percentage!
  description: String
  createdAt: LocalDateTime!
  updatedAt: LocalDateTime!
}

type TaxGroup {
  id: DbUuid!
  name: String!
  description: String
  createdAt: LocalDateTime!
  updatedAt: LocalDateTime!
  taxes: [Tax!]!
}

type User {
  id: DbUuid!
  username: String!
  fullName: String!
  state: UserState!
  lastLoginAt: LocalDateTime
  createdAt: LocalDateTime!
  updatedAt: LocalDateTime!
}

type VariantType {
  id: DbUuid!
  name: String!
  description: String
  createdAt: LocalDateTime!
  updatedAt: LocalDateTime!
  values: [VariantValue!]!
}

type VariantValue {
  id: DbUuid!
  value: String!
  displayOrder: Int!
  createdAt: LocalDateTime!
  updatedAt: LocalDateTime!
  variantType: VariantType!
}
